1+1
dev.off()
plot(as.numeric(rownames(increment_data_unique))-1,increment_data_unique[[1]],xlab="Age [in years]",
     ylab="radial growth [in mm]",main="Radial growth of 19 trees between 150 and 160 yrs",
     type="n",ylim=c(0,250),xlim=c(0,165)) #generate just the frame of the graphic to have all the same scale

for (i in 1:dim(increment_data)[2]) { #for loop to draw one by one, each line of tree increments, starting all in age 0
 #use of dim(increment_data)[2] to have the number of trees 1 to 19

    increment_data_unique <- as.data.frame(increment_data[,i])
    increment_data_unique <- as.data.frame(increment_data_unique[complete.cases(increment_data_unique), ]) #remove all the NA value
    increment_data_unique <- rbind(0,increment_data_unique) # add the 0 mm of DBH to start all tree at 0 years-old, 0 DBH
    par(new=TRUE) #allow to combine plots
    plot(as.numeric(rownames(increment_data_unique))-1,increment_data_unique[[1]],xlab="Age [in years]",
         ylab="radial growth [in mm]",
         main="Radial growth of 19 trees between 150 and 160 yrs",type="l",ylim=c(0,250),xlim=c(0,165)) #draw the plots for a single tree.
    #then restart the loop with the next tree, etc.
}
dim(increment_data)[2]
i
 increment_data_unique <- as.data.frame(increment_data[,i])
    increment_data_unique <- as.data.frame(increment_data_unique[complete.cases(increment_data_unique), ]) #remove all the NA value
    increment_data_unique <- rbind(0,increment_data_unique) #
 increment_data_unique
increment_data
 as.data.frame(increment_data[,i])
 as.data.frame(increment_data)
-increment_data[,i]
-increment_data[i]
-increment_data[i,with=F]
-increment_data[i,with=T]
-increment_data[i]
i
ii
i
increment_data[i]
increment_data[,i]
increment_data[,i,with=F]
increment_data[,.(i)]
plot(as.numeric(rownames(increment_data_unique))-1,increment_data_unique[[1]],xlab="Age [in years]",
     ylab="radial growth [in mm]",main="Radial growth of 19 trees between 150 and 160 yrs",
     type="n",ylim=c(0,250),xlim=c(0,165)) #generate just the frame of the graphic to have all the same scale

for (i in names(increment_data)) { #for loop to draw one by one, each line of tree increments, starting all in age 0
 #use of names(increment_data) to have the names of each trees from "V1" to "V19"

    increment_data_unique <-increment_data[,i,with=F]#with=FALSE to have the whole column
    increment_data_unique <- as.data.frame(increment_data_unique[complete.cases(increment_data_unique), ]) #remove all the NA value
    increment_data_unique <- rbind(0,increment_data_unique) # add the 0 mm of DBH to start all tree at 0 years-old, 0 DBH
    par(new=TRUE) #allow to combine plots
    plot(as.numeric(rownames(increment_data_unique))-1,increment_data_unique[[1]],xlab="Age [in years]",
         ylab="radial growth [in mm]",
         main="Radial growth of 19 trees between 150 and 160 yrs",type="l",ylim=c(0,250),xlim=c(0,165)) #draw the plots for a single tree.
    #then restart the loop with the next tree, etc.
}
plot(as.numeric(rownames(increment_data_unique))-1,increment_data_unique[[1]],xlab="Age [in years]",
     ylab="radial growth [in mm]",main="Radial growth of 19 trees between 150 and 160 yrs",
     type="n",ylim=c(0,250),xlim=c(0,165)) #generate just the frame of the graphic to have all the same scale

for (i in names(increment_data)) { #for loop to draw one by one, each line of tree increments, starting all in age 0
 #use of names(increment_data) to have the names of each trees from "V1" to "V19"

    increment_data_unique <-increment_data[,i,with=F]#with=FALSE to have the whole column
    increment_data_unique <- as.data.frame(increment_data_unique[complete.cases(increment_data_unique), ]) #remove all the NA value
    increment_data_unique <- rbind(0,increment_data_unique) # add the 0 mm of DBH to start all tree at 0 years-old, 0 DBH
    par(new=TRUE) #allow to combine plots
    plot(as.numeric(rownames(increment_data_unique))-1,increment_data_unique[[1]],xlab="Age [in years]",
         ylab="radial growth [in mm]",
         main="Radial growth of 19 trees between 150 and 160 yrs",type="l",ylim=c(0,250),xlim=c(0,165)) #draw the plots for a single tree.
    #then restart the loop with the next tree, etc.
}
as.data.table(increment_data_unique)

increment_data_unique <- as.data.frame(increment_data[,1])
increment_data_unique <- as.data.frame(increment_data_unique[complete.cases(increment_data_unique), ])
increment_data_unique <- rbind(0,increment_data_unique)
as.data.table(increment_data_unique)
increment_data_unique <- as.data.frame(increment_data[,1])
increment_data_unique <- as.data.frame(increment_data_unique[complete.cases(increment_data_unique), ])
increment_data_unique <- rbind(0,increment_data_unique)
as.data.table(increment_data_unique)
increment_data_unique <- as.data.frame(increment_data[,1])
increment_data_unique <- as.data.frame(increment_data_unique[complete.cases(increment_data_unique), ])
increment_data_unique <- rbind(0,increment_data_unique)
print(as.data.table(increment_data_unique))
increment_data[,1]
increment_data_unique[complete.cases(increment_data_unique), ]
increment_data_unique <- increment_data_unique[complete.cases(increment_data_unique), ]
increment_data_unique <- rbind(0,increment_data_unique)
increment_data_unique
increment_data_unique <- increment_data[,1]

increment_data_unique
increment_data_unique[complete.cases(increment_data_unique) ]
increment_data_unique <- increment_data_unique[complete.cases(increment_data_unique) ]
increment_data_unique <- rbind(0,increment_data_unique)
 increment_data_unique
rbind(0, increment_data_unique)
 class(increment_data_unique)
cbind(0, increment_data_unique)
rbind(0, increment_data_unique[,V1])
rbind(0, increment_data_unique[V1])
rbind(0, increment_data_unique)
rbind(list(0), increment_data_unique)
q()
n
q()
n
q()
n
q()
n
q()
n
q()
n
q()
n
q()
n
q()
n
q()
n
q()
n
map_draw_blog(status = "living", markk = "NA", with.stand = T, save = F)

map_draw_blog(status = "living", markk = "NA", with.stand = T, save = F)
     ggmap(google_map) +  geom_point(data = for_mapping, aes(
        lng,  lat, color = factor(pattern_state)), 
	size = 10, alpha =.80)+  geom_point(data = for_mapping_plot,
        aes( lng,  lat, color = factor(pattern_state)), size = 2)+  
	geom_label(data = for_mapping, aes(lng,  lat + .2, label =
        Stand_ID.m,color = factor(pattern_state)), size = 4) + 
	ggsave(paste0(status, " ", markk, " map with stand and plots patterns.jpg"))
map_draw_blog
dev.off()
dev.off()
dev.off()
dev.off()
map_draw_blog(status = "living", markk = "NA", with.stand = T, save = F)
status = "living"
 markk = "NA"
with.stand = T
data_stand_pat
save = F
  setkey(data_plot_pat, Status, mark)
    for_mapping_plot  <- data_plot_pat[Status == status & mark == markk] [, .( Stand_ID.m,lng, lat, pattern_state)]
    for_mapping_plot <- for_mapping_plot [!duplicated(for_mapping_plot )]#remove duplicated rows
                                        #for_mapping_plot [, unique( plotid.x )]

                                        #Stand prep data

    small_data_inf <- data_plot_pat[, .( Stand_ID.m, lng, lat)]
    to_map <-small_data_inf[, lapply(.SD, mean, na.rm = T), by = Stand_ID.m]#compute the mean of lng and lat by Stand_ID.m with removing NA value  only to remove lat and lng NA value

    pattern_to_put_map <- data_stand_pat[Status == status & mark == markk] [, .(Stand_ID.m, pattern_state)]
    for_mapping <- merge(to_map, pattern_to_put_map, by = "Stand_ID.m", all = T)

    for_mapping[, lng := as.numeric(lng)]
    for_mapping[, lat := as.numeric(lat)]

    for_mapping <- for_mapping[complete.cases(for_mapping)]

    google_map <- get_map(location = c(14,46,26,49),  maptype = "satellite", source = "google", zoom = 6)

    if(with.stand == TRUE) {
        if(save == TRUE) {
            ggmap(google_map) +  geom_point(data = for_mapping, aes(
        lng,  lat, color = factor(pattern_state)), 
	size = 10, alpha =.80)+  geom_point(data = for_mapping_plot,
        aes( lng,  lat, color = factor(pattern_state)), size = 2)+  
	geom_label(data = for_mapping, aes(lng,  lat + .2, label =
        Stand_ID.m,color = factor(pattern_state)), size = 4) + 
	ggsave(paste0(status, " ", markk, " map with stand and plots patterns.jpg"))
        } else {
            ggmap(google_map) +  geom_point(data = for_mapping, aes(
        lng,  lat, color = factor(pattern_state)), 
	size = 10, alpha =.80)+  geom_point(data = for_mapping_plot,
        aes( lng,  lat, color = factor(pattern_state)), size = 2)+  
	geom_label(data = for_mapping, aes(lng,  lat + .2, label = Stand_ID.m,color = factor(pattern_state)), size = 4)
        }
    } else {
        if(save == TRUE) {
            ggmap(google_map) +  geom_point(data = for_mapping_plot,
        aes( lng,  lat, color = factor(pattern_state)), size = 2)+  
	geom_label(data = for_mapping_plot, aes(lng,  lat + .2, label
        = Stand_ID.m,color = factor(pattern_state)), size = 4) + 
	ggsave(paste0(status, " ", markk, " map with stand and plots patterns.jpg"))
        } else {
            ggmap(google_map) + geom_point(data = for_mapping_plot, aes( lng,  lat, color = factor(pattern_state)), size = 2)
        }
    }
 for_mapping 
 merge(to_map, pattern_to_put_map, by = "Stand_ID.m", all = T)

for_mapping_plot 
    for_mapping_plot  <- data_plot_pat[Status == status & mark == markk] [, .( Stand_ID.m,lng, lat, pattern_state)]

for_mapping_plot 
 data_plot_pat
 summary(data_plot_pat)
 summary(as.factor(data_plot_pat$mark))
markk
data_plot_pat[Status == status & mark == markk]
status
data_plot_pat
data_plot_pat[mark=="NA"]
data_plot_pat[mark==NA]
data_plot_pat[is.na(mark)]
data_plot_pat[as.character(mark)=="NA"]
str(data_plot_pat)
data_plot_pat[as.factor(mark)=="NA"]
data_plot_pat[as.factor(mark)==NA]
data_plot_pat[,mark := as.factor(mark)]
str(data_plot_pat)
data_plot_pat[,mark := as.character(mark)]
str(data_plot_pat)
data_plot_pat[mark=="NA"]
data_plot_pat[is.na(mark)]
gsub("NA","none",data_plot_pat[is.na(mark)])
 data_stand_pat[Status == status & mark == markk]
markk
markk=NA
 data_stand_pat[Status == status & mark == markk]
mark
markk
data_stand_pat[Status == status & is.na(mark)]
markk
data_stand_pat[Status == status & mark == markk]
markk="NA"
data_stand_pat[Status == status & mark == markk]
data_stand_pat[Status == status & mark %in% markk]
markk=NA
data_stand_pat[Status == status & mark %in% markk]
map_draw_blog(status = "living", markk = NA, with.stand = T, save = T)

with.stand
data_plot_pat <- fread("data_plot_scale.txt") #read the data

str(data_plot_pat)
 ggmap(google_map) +  geom_point(data = for_mapping, aes(
        lng,  lat, color = factor(pattern_state)), 
	size = 10, alpha =.80)+  geom_point(data = for_mapping_plot,
        aes( lng,  lat, color = factor(pattern_state)), size = 2)+  
	geom_label(data = for_mapping, aes(lng,  lat + .2, label =
        Stand_ID.m,color = factor(pattern_state)), size = 4) + 
	ggsave(paste0(status, " ", markk, " map with stand and plots patterns.jpg"))
 ggmap(google_map)
google_map
tt
status
data_plot_pat
  ggmap(google_map) +  geom_point(data = for_mapping, aes(
        lng,  lat, color = factor(pattern_state)), 
	size = 10, alpha =.80)+  geom_point(data = for_mapping_plot,
        aes( lng,  lat, color = factor(pattern_state)), size = 2)+  
	geom_label(data = for_mapping, aes(lng,  lat + .2, label =
        Stand_ID.m,color = factor(pattern_state)), size = 4) + 
	ggsave(paste0(status, " ", markk, " map with stand and plots patterns.jpg"))
       ggmap(google_map) +  geom_point(data = for_mapping, aes(
        lng,  lat, color = factor(pattern_state)), 
	size = 10, alpha =.80)+  geom_point(data = for_mapping_plot,
        aes( lng,  lat, color = factor(pattern_state)), size = 2)+  
	geom_label(data = for_mapping, aes(lng,  lat + .2, label =
        Stand_ID.m,color = factor(pattern_state)), size = 4)
    google_map <- get_map(location = c(14,46,26,49),  maptype = "satellite", source = "google", zoom = 6) #create the map background using Google satellite data

 ggmap(google_map) +  geom_point(data = for_mapping, aes(
        lng,  lat, color = factor(pattern_state)), 
	size = 10, alpha =.80)+  geom_point(data = for_mapping_plot,
        aes( lng,  lat, color = factor(pattern_state)), size = 2)+  
	geom_label(data = for_mapping, aes(lng,  lat + .2, label =
        Stand_ID.m,color = factor(pattern_state)), size = 4)
for_mapping
 setkey(data_plot_pat, Status, mark)
    for_mapping_plot  <- data_plot_pat[Status == status & mark %in% markk] [, .( Stand_ID.m,lng, lat, pattern_state)] #here need to put %in% for the mark to take into account the mark == NA
    for_mapping_plot <- for_mapping_plot [!duplicated(for_mapping_plot )]#remove duplicated rows

     #Stand prep data
    small_data_inf <- data_plot_pat[, .( Stand_ID.m, lng, lat)]
    to_map <-small_data_inf[, lapply(.SD, mean, na.rm = T), by = Stand_ID.m]#compute the mean of lng and lat by Stand_ID.m with removing NA value  only to remove lat and lng NA value

    pattern_to_put_map <- data_stand_pat[Status == status & mark %in% markk] [, .(Stand_ID.m, pattern_state)]

    for_mapping <- merge(to_map, pattern_to_put_map, by = "Stand_ID.m", all = T)#all = TRUE to keep all the no match from the 2 tables
    for_mapping <- for_mapping[complete.cases(for_mapping)] #keep only data with complete cases (remove row with NA values)

 ggmap(google_map) +  geom_point(data = for_mapping, aes(
        lng,  lat, color = factor(pattern_state)), 
	size = 10, alpha =.80)+  geom_point(data = for_mapping_plot,
        aes( lng,  lat, color = factor(pattern_state)), size = 2)+  
	geom_label(data = for_mapping, aes(lng,  lat + .2, label =
        Stand_ID.m,color = factor(pattern_state)), size = 4)
 data_plot_pat[Status == status & mark %in% markk] [, .( Stand_ID.m,lng, lat, pattern_state)] #he
 for_mapping_plot
  for_mapping
 ggmap(google_map) +  geom_point(data = for_mapping, aes(
        lng,  lat, color = factor(pattern_state)), 
	size = 10, alpha =.80)
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
 ggmap(google_map) +  geom_point(data = for_mapping, aes(
        lng,  lat, color = factor(pattern_state)), 
	size = 10, alpha =.80)
save
 ggmap(google_map) +  geom_point(data = for_mapping, aes(
        lng,  lat, color = factor(pattern_state)), 
	size = 10, alpha =.80) if (save = T) {
 ggmap(google_map) +  geom_point(data = for_mapping, aes(
        lng,  lat, color = factor(pattern_state)), 
	size = 10, alpha =.80) ;if (save = T) {
 ggmap(google_map) +  geom_point(data = for_mapping, aes(
        lng,  lat, color = factor(pattern_state)), 
	size = 10, alpha =.80)
if (save = F) {
if (save == F) {
 geom_point(data = for_mapping_plot,
        aes( lng,  lat, color = factor(pattern_state)), size = 2)
}
q()
n
q()
n
plot_NA_list[1:3]

plot_NA_list$'1'$rank_env_NA
plot_NA_list$1$rank_env_NA
plot_NA_list$"1"$rank_env_NA
plot_NA_list$"1"
plot_NA_result$"1"$rank_env_NA
plot_NA_results$"1"$rank_env_NA
NA_list_result$"1"$rank_env_NA
plot(NA_list_result$"1"$rank_env_NA)
plot(NA_list_result$"1"$random_labelling)
plot(NA_list_result$"1"$random_labelling)
plot(NA_list_result$"1"$random_labelling)
plot(NA_list_result$"1"$rank_env_NA)
plot(NA_list_result$"1"$random_labelling)
plot(NA_list_result$"1"$rank_env_NA)
plot(NA_list_result$"1"$rank_env_NA)
plot(NA_list_result$"1"$random_labelling)
plot(NA_list_result$"1"$rank_env_NA)
NA_list_result$"1"$random_labelling
NA_list_result$"1"$rank_env_NA
plot(NA_list_result$"1"$rank_env_NA)

getwd()
plot(NA_list_result$"1"$rank_env_NA)

jpg("rank_envelope.jpg")
jepg("rank_envelope.jpg")
jpeg("rank_envelope.jpg")
plot(NA_list_result$"1"$rank_env_NA)

dev.off()
q()
n
