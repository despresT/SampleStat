#+AUTHOR: Tiphaine Despr√©s
#+email: tiphaine.despres@gmail.com
#+PROPERTY: BLOG Sample Stat
#+STARTUP: fninline overview

#+OPTIONS: <:nil d:nil timestamp:t
#+OPTIONS: ^:nil tags:nil
#+OPTIONS: toc:nil num:nil
#+SEQ_TODO: TODO READY DONE
* Emacs :Emacs:
** DONE Emacs + ESS = loving R :R:
   SCHEDULED: +<2016-12-30 ven.>
   :PROPERTIES:
   :EXPORT_JEKYLL_LAYOUT:
   :filename: 2016-12-30-emacs-ess-loving-r
   :END:
   Since my second year of university I have studied Statistic with R on Windows using
   the basic text editor from the R GUI console. I was happy with it for a
   couple of years. However, when I start coding more complex and longer
   function, it was a nightmare to handle human issues, specially
   parentheses tracking. A professor told me that they were some programs
   specific to code in R, such as [[http://nbcgib.uesc.br/lec/software/editores/tinn-r/en][Tinn-R]] or the well known [[https://www.rstudio.com/][R-Studio]]. I
   also found that Notepad++ as a plugin ([[https://sourceforge.net/projects/npptor/][nppToR]]) to link the text
   editor to R. However, after trying R-Studio and Notepad++, I was not
   very happy with them. I always did not like the multi-windows
   design from R-Studio, and Notepad++ was only a better way to use
   the script function from the R GUI. It was not fully integrated
   R. Finally, my professor told me about Emacs, and how it was working
   with R. I first try it with Windows, using the very good
   [[http://vgoulet.act.ulaval.ca/en/emacs/][Emacs version from Vincent Goulet]]. It was exactly what I was looking for. A software
   that can interact with R without a lot of windows, and well integrated
   with R. Few years later, I jump to Linux using first Manjaro (an
   ArchLinux distribution), and after Xubuntu to keep the very good XFCE
   desktop environment.
   #+ATTR_HTML: :width 800
   [[/assets/images/screenshoot-emacs.png][file:/assets/images/screenshoot-emacs.png]]
   For the reader who don't know anything about [[https://www.gnu.org/software/emacs/][Emacs]] this is a free
   software from the GNU licence which can speak R using [[https://ess.r-project.org/][ESS]] package (for Emacs
   Speaks Statistic). But Emacs did not speak only statistic, this is an
   incredible tool that can speak multiple computers languages, read your
   email and much more. In fact, I am writing this blog article using
   Emacs through  [[http://orgmode.org/][Org-mode]]. Emacs is a cross-platform program which can
   be used with Windows or Mac Os, and also Linux.
   I will put more articles in this blog describing how I am using Emacs
   with R, and for blogging, and hopefully you will consider it to use
   for your own
* R :R:
** READY For loop                                                      :Loop:
   Using loop with R is not the proper behaviour to have. Indeed,
   using the apply functions family such as /tapply/, /lapply/, and so
   one are a better way to do it, but for me, this is in some case too
   complicated.
   The apply family functions improve the speed rate of T and the management of the memory. Thus,  apply functions is relevant to use when you have big data-set to play with.
   Instead of using apply functions, I used =for= loop. This is simpler to understand it  for me and with moderate data-set (about few thousand of rows and 100 columns) the gain of apply functions is limited.
   Like this, =for= loop can be read again quickly even when you comeback to your code years later.
   I will now provide a small example to understand when you can use =for= loop and how to used them.  Also, note that understanding =for= loop will lead to use =foreach= function which allow parallelisation computing. It will be explain in another post.
   
   So, let's begin the =for= loop example.
   I will show you how to do spaghetti plot from tree ring data. 
*** About the data 
    Every year, tree make rings. We can count them to have the tree
    age, and also measure them to know a little more about the tree
    and its story. Indeed, tree increment (ring width from a year to
    another) give information on past climate, past disturbances
    (pest, drought, fire, ice and wind storms, etc.). 

    In this data set([[/assets/data/tree rings increment.txt][tree rings increment]]) you will find tree rings
    increment [in mm] from 19
    different trees (V1 to V19). The NA value is for year without
    increment information for this tree (it was not born), and the row
    #270 is for AD 2011  and the row #1 for AD 1741.
    
    The data look like this:
   #+NAME: data_ring
   #+BEGIN_SRC R :results output :exports both :session t 
setwd("./assets/data/") # change following your own working directory
library(data.table) #load data.table at least V.1.10 (to have fread function)
increment_data <- fread("tree rings increment.txt")

##if you did not want to use data.table V1.10 (which allow the fread function use the following code
#increment_data <- read.table("tree rings increment.txt",sep=";",h=T) #for your data,
#Because trees have not the same age, there is a lot of NA value and the length of
#your data frame is equal to the year of the oldest trees (for me it was a tree not show in this sub-sample).
#print(increment_data[1:3])

increment_data[, .(V1,V2,V3)]

#+END_SRC

#+RESULTS: data_ring
#+begin_example
data.table 1.10.0
  The fastest way to learn (by data.table authors): https://www.datacamp.com/courses/data-analysis-the-data-table-way
  Documentation: ?data.table, example(data.table) and browseVignettes("data.table")
  Release notes, videos and slides: http://r-datatable.com
         V1     V2    V3
  1:     NA     NA    NA
  2:     NA     NA    NA
  3:     NA     NA    NA
  4:     NA     NA    NA
  5:     NA     NA    NA
 ---                    
266: 128.99 182.54 66.89
267: 130.45 182.80 67.14
268: 131.54 183.24 67.50
269: 132.25 183.48 67.73
270: 132.76 184.34 68.14
#+end_example

We are now going to plot each tree starting from their first year of
growth record (i.e. the closest year to the row #1), and then continue
until the year AD 2011 (i.e. row #270). 
Because in data-set there is no year with 0 of increment, we need to
add it for each trees using the following code example for one tree: 

   #+BEGIN_SRC R :results output  :exports both :session t
    # the 3 following code line are just to help to generate the graphic frame
increment_data_unique <- increment_data[,1]
increment_data_unique <- increment_data_unique[complete.cases(increment_data_unique) ]
increment_data_unique <- rbind(list(0),increment_data_unique)
# I am pretty sure that those 3 lines of code are not required.
as.data.table(increment_data_unique)
   #+END_SRC 

   #+RESULTS:
   #+begin_example
	    V1
     1:   0.00
     2:   0.71
     3:   1.64
     4:   2.07
     5:   2.46
    ---       
   137: 128.99
   138: 130.45
   139: 131.54
   140: 132.25
   141: 132.76
#+end_example
Here we can see that we remove all NA value, and put a 0.00 value for
the first year of growth of the tree



Because we need to do it for each 19 trees, this is easier to do it
within a =for= loop like this:

   #+BEGIN_SRC R :results graphics :exports code :session t :file "Multiplot_radial_growth_sugar_maple_between_150_and_160_years_old.jpg" :width 1200 :height 1000 :units "px"
#pdf("Multiplot radial growth sugar maple between 150 and 160 years old.pdf", width=12, height=8) #to save the plot as PDF

plot(as.numeric(rownames(increment_data_unique))-1,increment_data_unique[[1]],xlab="Age [in years]",
     ylab="radial growth [in mm]",main="Radial growth of 19 trees between 150 and 160 yrs",
     type="n",ylim=c(0,250),xlim=c(0,165)) #generate just the frame of the graphic to have all the same scale

for (i in names(increment_data)) { #for loop to draw one by one, each line of tree increments, starting all in age 0
 #use of names(increment_data) to have the names of each trees from "V1" to "V19"

    increment_data_unique <-increment_data[,i,with=F]#with=FALSE to have the whole column
    increment_data_unique <- as.data.frame(increment_data_unique[complete.cases(increment_data_unique), ]) #remove all the NA value
    increment_data_unique <- rbind(0,increment_data_unique) # add the 0 mm of DBH to start all tree at 0 years-old, 0 DBH
    par(new=TRUE) #allow to combine plots
    plot(as.numeric(rownames(increment_data_unique))-1,increment_data_unique[[1]],xlab="Age [in years]",
         ylab="radial growth [in mm]",
         main="Radial growth of 19 trees between 150 and 160 yrs",type="l",ylim=c(0,250),xlim=c(0,165)) #draw the plots for a single tree.
    #then restart the loop with the next tree, etc.
}
#dev.off() # save the graphic in your directory

   #+END_SRC

   #+RESULTS:
   [[file:Multiplot_radial_growth_sugar_maple_between_150_and_160_years_old.jpg]]


  [[/assets/data/Multiplot_radial_growth_sugar_maple_between_150_and_160_years_old.jpg][file:/assets/data/Multiplot_radial_growth_sugar_maple_between_150_and_160_years_old.jpg]]


If you want, I have put the all code in my GitHub with the data-set [[https://github.com/despresT/Dendro-spaghetti-plot][Dendro-spaghetti-plot]]
 




** DONE Convert factor to character
   SCHEDULED: <2017-02-12> :factor:convert:
   SCHEDULED: <2017-01-12 jeu.>
   :PROPERTIES:
   :EXPORT_JEKYLL_LAYOUT:
   :filename: 2017-01-12-convert-factor-to-character
   :END:
   In R, you used sometimes functions to convert vectors to another
   format with =as.character=, =as.factor= or =as.numeric=.
   However, you need to be careful when using the function =as.numeric= on
   a factor. Indeed, if the factor contains factor number, it will
   convert them to the level number and not convert the writing number
   from your factor.
   Here is a short example:
   #+NAME: block1
   #+BEGIN_SRC R :results output :exports both :session t
   library(data.table)
   set.seed(23) #set.seed to have the same random value as in this example
   to_convert <- factor(runif(1:10, min = 0, max = 100))
   print(levels(to_convert))
   #+END_SRC
   #+RESULTS: block1
   : data.table 1.9.8
   :   The fastest way to learn (by data.table authors): https://www.datacamp.com/courses/data-analysis-the-data-table-way
   :   Documentation: ?data.table, example(data.table) and browseVignettes("data.table")
   :   Release notes, videos and slides: http://r-datatable.com
   :  [1] "22.3072855733335" "33.1896589370444" "42.3720560967922" "57.6603659661487"
   :  [5] "71.072455169633"  "81.9448956055567" "84.052187949419"  "96.3544549420476"
   :  [9] "97.8130409261212" "99.6611237060279"
   #+BEGIN_SRC R :session t :results table :colnames yes :exports both
   data.table(factor_to_convert = to_convert,
   using_as_numeric_only = as.numeric(to_convert),
   using_as_character_first = as.numeric(as.character(to_convert)))
   #+END_SRC
   #+RESULTS:
   | factor_to_convert | using_as_numeric_only | using_as_character_first |
   |-------------------+-----------------------+--------------------------|
   |  57.6603659661487 |                     4 |         57.6603659661487 |
   |  22.3072855733335 |                     1 |         22.3072855733335 |
   |  33.1896589370444 |                     2 |         33.1896589370444 |
   |   71.072455169633 |                     5 |          71.072455169633 |
   |  81.9448956055567 |                     6 |         81.9448956055567 |
   |  42.3720560967922 |                     3 |         42.3720560967922 |
   |  96.3544549420476 |                     8 |         96.3544549420476 |
   |  97.8130409261212 |                     9 |         97.8130409261212 |
   |   84.052187949419 |                     7 |          84.052187949419 |
   |  99.6611237060279 |                    10 |         99.6611237060279 |
   So, be careful when you are using factor with numerical levels and you
   want to convert them.
** TODO Creating a function                                        :function:
   In R, most of people used build-in functions which are very useful for all basics statistical anayses. When you need to do more complex statistics you can use packages. There is almost every current statistical functions and more in the Cran repository. However, time to time you will need to build your own function. Usually, when I build a function is because for loop will not be efficient and that I need to put different parameters that I can change.
   I will take here an easy example that I have done latterly for my work.
   I wanted to build a short function to draw maps and save them of I needed to.
   Here is the code:
